package solver;

import java.util.ArrayList;
import java.util.Objects;

// State represents the positions of all the crates and position of the player which are always changing
public class State {
    public ArrayList<Coordinate> cratePosList;
    public Board board;
    public Coordinate playerPos;

    // Key generated by the zobrist hash or the move function
    public long hashKey;

    public State() {
    }

    public State(ArrayList<Coordinate> cratePosList, Board board, Coordinate playerPos) {
        this.cratePosList = cratePosList;
        this.board = board;
        this.playerPos = playerPos;
    }

    // Returns a deep copy of State (actually just the itemData and cratePosList)
    public State copy() {
        State newState = new State();

        newState.cratePosList = new ArrayList<>();
        for (Coordinate pos : cratePosList)
            newState.cratePosList.add(new Coordinate(pos.x, pos.y));

        Board newBoard = new Board(board.mapData, new char[board.height][board.width], board.width, board.height);
        for (int i = 0; i < newBoard.height; i++) {
            newBoard.itemData[i] = board.itemData[i].clone();
        }
        newState.board = newBoard;
        newState.playerPos = playerPos;
        newState.hashKey = hashKey;

        return newState;
    }

    // Used for hashing and PQs in AStar but not for ZAStar
    @Override
    public boolean equals(Object o) {
        State that = (State) o;

        return Objects.equals(cratePosList, that.cratePosList) &&
               Objects.equals(playerPos, that.playerPos);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cratePosList, playerPos);
    }
}